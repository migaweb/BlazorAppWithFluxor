@page "/counter"
@inherits FluxorComponent
@using BlazorAppWithFluxor.Client.Features.Counter.Store
@using BlazorAppWithFluxor.Client.Features.Hubs
@inject IDispatcher Dispatcher
@inject IState<CounterState> CounterState
@inject IState<CounterHubState> CounterHubState

<PageTitle>Counter</PageTitle>

<h1>Counter</h1>

<p role="status">Current count: @CounterState.Value.CurrentCount</p>

<button class="btn btn-primary" @onclick="IncrementCount">Increment</button>
<button class="btn btn-outline-primary" @onclick="SaveCount">Save</button>
<button class="btn btn-outline-info" @onclick="LoadCount">Load</button>
<button class="btn btn-outline-danger" @onclick="ClearCount">Clear</button>
<button class="btn btn-outline-danger" @onclick="Set100Count">100</button>
<button class="btn btn-outline-warning"
        @onclick="SendCount"
        disabled="@(!CounterHubState.Value.Connected)">
    Broadcast
</button>

@code {
    protected override void OnInitialized()
    {
        SubscribeToAction<CounterHubReceiveCountAction>(CountReceived);
        base.OnInitialized();
    }

    private void CountReceived(CounterHubReceiveCountAction action)
    {
        Dispatcher.Dispatch(new CounterSetAction(action.Count));
    }

    private void Set100Count()
    {
        Dispatcher.Dispatch(new CounterSetAction(100));
    }

    private void SendCount()
    {
        Dispatcher.Dispatch(new CounterHubSendCountAction(CounterState.Value.CurrentCount));
    }

    private void IncrementCount()
    {
        Dispatcher.Dispatch(new CounterIncrementAction());
    }

    private void SaveCount()
    {
        Dispatcher.Dispatch(new CounterPersistStateAction(CounterState.Value));
    }

    private void LoadCount()
    {
        Dispatcher.Dispatch(new CounterLoadStateAction());
    }

    private void ClearCount()
    {
        Dispatcher.Dispatch(new CounterClearStateAction());
    }
}
